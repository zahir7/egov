<?xml version="1.0" encoding="UTF-8"?>	<!--	web.xml - MVC 모델 프로젝트가 실행될때 가장 먼저 실행되는 셋팅 파일.		-->
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">	<!-- xml 스키마 정의  -->
	<display-name>egov.sample</display-name>
    
	<!-- 파라미터 encoding 타입 utf-8정의 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>
    
	
	<!--  
		HTMLTagFilter는 크로스 스크립팅 차단한다.
		- 크로스크립티트란 ? 
			<script> 로 시작하는 코드를 전송시켜 해킹코드를 서버에서 실행시키는 기법
			예) '<' -> '&lt;' 꺽쇠괄호를 정규식코드로 변환해준다. 
	-->
	<filter>
		<filter-name>HTMLTagFilter</filter-name>
		<filter-class>egovframework.rte.ptl.mvc.filter.HTMLTagFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>HTMLTagFilter</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>
	
	<!-- sitemesh 웹 페이지 레이아웃을 쉽게 조합 가능하게 해주는 프레임워크
	<filter>
	  <filter-name>sitemesh</filter-name>
	  <filter-class>org.sitemesh.config.ConfigurableSiteMeshFilter</filter-class>
	</filter>
	<filter-mapping>
	  <filter-name>sitemesh</filter-name>
	  <url-pattern>*.do</url-pattern>
	</filter-mapping>
      -->
      
      
    <!-- 
		Listener는 서블릿과는 다르게 서블릿 컨테이너(tomcat)가 web.xml 파일을 읽어서 구동될떄, 자동으로메모리에 생성(pre-loading)되는 객체이다.
		contextConfigLocation는 <context-param>을 등록하지 않으면 applicationContext.xml을 자동으로 로딩한다.
		때문에 복수 xml 파일들을 로딩할때는  <context-param> 등록해준다.
	 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:egovframework/spring/context-*.xml</param-value>
	</context-param>
    
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
    
	
	<!-- 
		DispatcherServlet 등록
		HandlerMapping, Controller, ViewResolver 객체 셋팅. 클라이언트 요청 대응.
		<load-on-startup>1</load-on-startup> 이 없다면 *.do 라는 요청이 들어올때 DispatcherServlet 실행한다.
		반대로 <load-on-startup>1</load-on-startup>이 있으면 컨터이너가 실행될때 실행한다.
		DispatcherServlet클래스 또한 기본 설정 경로가 /WEB-INF 경로의 [servlet-name]-servlet.xml이기 때문에 
		<init-param>을 이용하여 경로를 설정해준다.
	 -->
	<servlet>
		<servlet-name>action</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/config/egovframework/springmvc/dispatcher-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
    
	<servlet-mapping>
		<servlet-name>action</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
    
	
	<!-- 페이지 지정없이 경로만 지정했을시 default로 보여주는 페이지  -->
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
    
	<!-- 
		보안된 페이지로 들어가려는 사용자에 대한 서버의 인증 방식
		BASIC, DIGEST, CLIENT-CERT, FORM 네가지 방식
	 -->
	<login-config>
		<auth-method>BASIC</auth-method>
	</login-config>
    
	<!-- 에러페이지 설정 -->
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/common/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/common/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/common/error.jsp</location>
	</error-page>
    
</web-app>
